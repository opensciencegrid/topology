<!--

To add a map layer use create a key

To add a view to this map you will want to Site.getMarker and
will want to adjust the Map.data which populates the select input and legend.


-->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>OSG Compute Map</title>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.8.0/dist/leaflet.css"
       integrity="sha512-hoalWLoI8r4UszCkZ5kL8vayOGVae1oxXe/2A4AO6J9+580uKHDO3JdHb7NzwwzK5xr/Fs0W40kiNHxM9vyTtQ=="
       crossorigin=""/>

    <script src="https://unpkg.com/leaflet@1.8.0/dist/leaflet.js"
       integrity="sha512-BB3hKbKWOc9Ez/TAwyWxNXeoV9c1v6FIeYiBieIWkpLjauysF18NzgR1MBNBXf8/KABdlkX68nAhlwcDFLGPCQ=="
       crossorigin=""></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/dom-to-image/2.6.0/dom-to-image.js" integrity="sha512-wUa0ktp10dgVVhWdRVfcUO4vHS0ryT42WOEcXjVVF2+2rcYBKTY7Yx7JCEzjWgPV+rj2EDUr8TwsoWF6IoIOPg==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>

    <style>
        body {margin: 0;}

        #map { height: 100vh; width: 100vw; }

        #full-screen {
            padding: 6px 6px 4px 6px;
            position: absolute;
            left: 10px;
            bottom: 10px;
            z-index: 1000;
            border-radius: 5px;
            border: #3a3a3a solid 1px;
        }

        #full-screen > img {
            height: 24px;
            width: 24px;
        }

        #selection-container {
            display: flex;
            flex-direction: column;
            position: absolute;
            top: 10px;
            right: 10px;
            z-index: 1000;
        }

        #selection-container[hidden] {
            display: none;
        }

        #legend {
            position: absolute;
            background-color: #f7f7f7f5;
            padding: 2px 6px 0px 6px;
            bottom: 20px;
            right: 4px;
            z-index: 1000;
            border-radius: 5px;
            font-size: 12px;
            box-shadow: 3px 3px 6px black;
        }

        .legend-header {
            margin:0;
            font-size: 1rem;
        }

        .label-container {
            display: flex;
            flex-direction: column;
            padding-left: .2rem;
        }

        .label-node {
            font-size: 14px;
        }

        .legend-image-container {
            display:flex;
        }

        .legend-image-container > img {
            margin: auto;
            height: 28px;
            width: 21px;
        }

        .select-container {
            border-radius: 5px;
            border: #3a3a3a solid 1px;
            background: white;
            margin-left: auto;
        }

        .resource-container.compute {
            background-color: #c5deea;
        }

        .resource-container.storage {
            background-color: #dfcce0;
        }

        .select-container > label {
            background: white;
            padding-left: 6px;
            font-size: 1rem;
            color: #3a3a3a;
        }

        .select-container > select {
            padding: 4px 6px;
            font-size: 1rem;
            border: 0;
        }

        .popup {
            max-height: 400px;
            overflow-y: auto;
        }

        .entry-container {
            display: flex;
            margin-bottom: 4px;
        }

        #legend > hr {
            margin: 0 0 .3rem 0;
        }

        .entry-container > span {
            font-size: .9rem;
            margin: auto 0;
            padding-left: 6px;
        }

        .site-card-header {
            margin: 0;
        }

        .facility-card-header {
            color: #717070;
            margin: 0;
        }

        .resource-group-header {
            border-radius: 5px;
            background: #3a3a3a;
            color: #dddddd;
            padding: 6px;
            margin: 10px 0 0 0;
        }

        .resource-container {
            border: 1px solid #ccc;
            padding: 6px;
            border-radius: 4px;
            margin: 1px 0;
            display: flex;
        }

        .resource-container > img {
            height: 16px;
            width: 16px;
        }

        .resource-container > span {
            padding-left: 8px;
        }

        #print-button {
            background: white;
            position: absolute;
            top: 10px;
            left: 55px;
            padding: 4px 6px;
            font-size: 1rem;
            border-radius: 5px;
            border: #3a3a3a solid 1px;
            z-index: 1000;
        }

        #site {
            max-width: 300px;
        }
    </style>
</head>
<body>
    <main id="main">
        <div id="print-region">
            <div id="map"></div>
            <div id="legend" class="leaflet-container" hidden>
                <div id="legend-items"></div>
            </div>
        </div>

        <button id="full-screen" onclick="toggleFullscreen()"><img alt="Outward arrows towards corners of square" src="../static/images/map/arrows-fullscreen.svg"/></button>

        <button id="print-button" onclick="downloadPNG()">Print as PNG</button>

        <div id="selection-container">
            <div id="site-container" class="leaflet-container select-container">
                <label for="site">Site</label>
                <select id="site"></select>
            </div>
            <div id="view-container" class="leaflet-container select-container">
                <label for="view">View</label>
                <select id="view"></select>
            </div>
        </div>
    </main>
</body>
<script>
    const compute_services = new Set(["CE", "Submit Node", "Connect", "GUMS Server", "Glidein factory", "VOMS Server", "Execution Endpoint"]);
    const storage_services = new Set(["Squid", "SRMv2", "XRootD cache server", "GridFtp", "XRootD component", "XRootD origin server", "SRMv1", "LFC", "Apache Server", "FTS"]);
    const network_services = new Set(["net.perfSONAR.Bandwidth", "net.perfSONAR.Latency"]);
    const backup_ospool_resources = new Set([
        "Expanse-PATH-EP", "SU-ITS-CE3", "MWT2", "SU-ITS-CE2", "UConn-HPC", "IU-Jetstream2-Backfill", "Purdue-Geddes",
        "UNL-PATH-EP", "GPGrid", "WISC-PATH-EP", "GLOW", "Lancium-Backfill", "UNKNOWN", "Clemson-Palmetto-CE1",
        "Lancium-PEP", "MTState-Tempest-CE1", "SDSC-PRP-OSPool-Provisioner", "UW-IT", "Lehigh - Hawk", "NWICG_NDCMS",
        "UColorado_HEP", "MI-HORUS-CE1", "SIUE-CC-production", "AMNH-Mendel-CE1", "NDSU-Lancium-Backfill",
        "OU_OCHEP_SWT2", "Purdue-Anvil-CE1", "VU-AUGIE", "TACC-Jetstream-Backfill", "CHTC-Spark-CE1", "BNL-ATLAS",
        "UC-Denver-CE1", "KSU-Beocat-CE1", "AMNH-HEL-CE1", "Nebraska", "OSG_US_FSU_HNPGRID", "PSU-LIGO", "TCNJ-ELSA",
        "SYRA-PATH-EP", "GP-ARGO-wichita-backfill", "Alabama-CHPC-CE1", "UConn-OSG", "UA-LR-ITS-EP", "USCMS-FNAL-WC1",
        "AGLT2", "LSUHSC-Tigerfish-CE2", "Rhodes-HPC-CE1", "CUmulus-Backfill", "Purdue-Anvil-Composable", "Crane",
        "UTC-Epyc", "USD-Lawrence-CE1", "Georgia_Tech_PACE_CE_2", "GPN-GP-ARGO-Backfill", "Swan-CE1", "LC-ITS",
        "GP-ARGO-sdsu-backfill", "GP-ARGO-dsu-backfill", "IIT_CE2", "Georgia_Tech_PACE_CE_OSG", "NMSU-Discovery-CE1",
        "Rice-RAPID-Backfill", "GP-ARGO-uams-backfill", "UA-HPC-CE1", "GP-ARGO-usd-backfill", "GP-ARGO-sdsmt-backfill",
        "GP-ARGO-astate-backfill", "GP-ARGO-oru-backfill", "Rhino", "ODU-Ubuntu", "ORU-Titan-CE1",
        "GP-ARGO-mst-backfill", "SLATE_US_NMSU_DISCOVERY", "Maine-ACG-CE1", "GP-ARGO-uark-backfill",
        "GP-ARGO-emporia-backfill", "Hawaii-Koa-CE1", "LIGO-WA-CE", "FANDM-ITS", "GP-ARGO-ksu-backfill", "AMNH-Mendel",
        "GP-ARGO-ku-backfill", "ASU-Sol-CE1", "PDX-Coeus-CE1", "MSU-DataMachine-CE1", "GP-ARGO-creighton-backfill",
        "GSU-ACIDS", "SDSC-PRP-CE1", "GP-ARGO-doane-backfill", "GP-ARGO-semo-backfill", "GP-ARGO-langston-backfill",
        "USC-CARC-Artemis-Backfill", "LSUHSC-Tigerfish-CE1", "uprm-cms", "WSU-GRID", "IRISHEP-SSL-RIVER-DEV-BACKFILL",
        "SLATE_US_UUTAH_NOTCHPEAK", "GP-ARGO-cameron-backfill", "ASU-DELL_M420", "WTAMU_HPC", "UW-IT-CE1",
        "Clarkson-ACRES-CE2", "WSU-GRID-CE1", "Clemson-Palmetto", "SLATE_US_NMSU_AGGIE_GRID", "CHTC-canary2", "ISI",
        "AMNH-HEL", "SDSC-TS-CE1", "ND_CAMLGPU", "SLATE_US_UUTAH_LONEPEAK", "KENT-STATE-RESEARCH-EP", "SDSC-Expanse",
        "LSU-DB-CE1", "TACC-Stampede2-CE2", "VU-AUGIE-CE1", "GP-ARGO-osu-backfill", "UChicago_Pile_Backfill",
        "AMNH-ARES-CE1", "IIT_CE1", "Wilson Facility", "cinvestav", "SLATE_US_UUTAH_KINGSPEAK", "FIU-IRCC", "WTAMU-HPC",
        "CHTC", "FSU-HNPGRID", "SPRACE", "USF", "SDSC-Expanse-CE1", "UND-Talon-CE1", "AMNH-ARES", "UNR-CC-CE1",
        "UMT-Hellgate-CE1", "CYBERA_EDMONTON", "SDSC-PRP", "Clarkson-ACRES", "GP-ARGO-kanren-backfill", "BEOCAT-SLATE",
        "NMSU-Discovery", "UAH-Voyager-CE1", "UCR-HPCC-CE1", "Local Job", "chameleon-uc-dev-backfill", "NDSU-CCAST",
        "FIU-PATH-BACKFILL", "IRISHEP-SSL-UCHICAGO", "ND-CAML_gpu", "USF-SC", "FIU-IRCC-CE1", "UMissHEP", "CIT_CMS_T2",
        "Maine-ACG", "TIGER-OSG-BACKFILL-PROD", "SDSC-Triton_Stratus", "CHTC-GPU-EP", "NCSU-HPC-CE1",
        "Jetstream2-IU-Backfill", "Tufts-Cluster", "LC-ITS-CE1", "PATH-OSPOOL-BACKFILL", "JetStream", "Lancium-HMF-ITB",
        "scott.grid.uchicago.edu", "amundsen.grid.uchicago.edu", "USC-CARC-Carina-Backfill", "GSU-ACORE",
        "GLUEX_US_FSU_HNPGRID", "TNTech-Warp1-CE1", "MIT_CMS", "Langston-Lion-CE1", "OSG_US_ISI_osg",
        "UIUC-TGI-RAILS-CE1", "rutgers-cms", "OSG_US_GSU_ACORE", "TACC-PATH-EP", "ISI_ImageTest",
        "CancerComputer_MinneUEL_CE", "UCSDT2", "OSG_US_MWT2_gk", "BELLARMINE_TIER2", "HOSTED-CE-CHTC-UBUNTU",
        "UWM-NEMO", "UFlorida-HPC", "UTA_SWT2", "PSC-Bridges2-CE2", "CHTC-DEV-EP-matyas", "RABBIT-OSG-BACKFILL-PROD",
        "BNL-SDCC-CE01", "UWEC-BOSE-CE1", "OSG_US_USF_SC", "OSG_US_NMSU_DISCOVERY", "JLab-FARM-CE", "matyas-laptop",
        "ComputeCanada-Cedar", "UERJ", "CHTC-ITB-GPU-BACKFILL", "CHTC-Jupyter-User-EP", "BrianTest", "TCNJ - ELSA",
        "Lamar-Cluster", "OSG_US_TCNJ_ELSA", "OSG_US_UMD_SIAB", "TACC-Stampede2-ce2", "Anvil", "DESY-ZN",
        "FIU_HPCOSG_CE", "Jetstream", "NDSU-Lancium-Backfill-Test", "OSG_US_ASU_DELL_M420", "OSG_US_GSU-ACORE",
        "SLATE_US_UIUC_HTC", "nat.mwt2.org"
    ].map(x => x.toLowerCase()))
    const backup_ospool_resource_timestamp = "2024-09-12"

    const NRP = [
        {
            "id": 2,
            "name": "University of California San Diego",
            "siteName": "Atkinson Hall",
            "slug": "atkinson-hall",
            "latitude": 32.882645,
            "longitude": -117.234768
        },
        {
            "id": 39,
            "name": "San Diego State University",
            "siteName": "SDSU",
            "slug": "sdsu",
            "latitude": 32.77741,
            "longitude": -117.07141
        },
        {
            "id": 83,
            "name": "Gatech/Sox",
            "siteName": "Gatech",
            "slug": "gatech",
            "latitude": 33.75543,
            "longitude": -84.39158
        },
        {
            "id": 108,
            "name": "Internet2",
            "siteName": "Internet2 Boise 2",
            "slug": "i2-boise-2",
            "latitude": 43.56061,
            "longitude": -116.21984
        },
        {
            "id": 113,
            "name": "Gatech/Sox",
            "siteName": "CAU",
            "slug": "cau",
            "latitude": 33.747415,
            "longitude": -84.412459
        },
        {
            "id": 74,
            "name": "OneNet",
            "siteName": "OneNet OKC",
            "slug": "onenet-okc",
            "latitude": 35.473011,
            "longitude": -97.503373
        },
        {
            "id": 46,
            "name": "University of Delaware",
            "siteName": "UDel",
            "slug": "udel",
            "latitude": 39.678044,
            "longitude": -75.750598
        },
        {
            "id": 35,
            "name": "University of California Merced",
            "siteName": "UCMerced",
            "slug": "ucmerced",
            "latitude": 37.3647,
            "longitude": -120.42412
        },
        {
            "id": 98,
            "name": "California State Polytechnic University, Humboldt",
            "siteName": "California State Polytechnic University, Humboldt",
            "slug": "humboldt",
            "latitude": 40.876429,
            "longitude": -124.077165,
            "ospool": true
        },
        {
            "id": 50,
            "name": "California State University, San Bernardino",
            "siteName": "CSUSB",
            "slug": "csusb",
            "latitude": 34.18207,
            "longitude": -117.3234,
            "ospool": true
        },
        {
            "id": 104,
            "name": "San Diego Community College District",
            "siteName": "Miramar College",
            "slug": "miramar-college",
            "latitude": 32.912078,
            "longitude": -117.118691
        },
        {
            "id": 13,
            "name": "Massachusetts Green High Performance Computing Center",
            "siteName": "100 Bigelow",
            "slug": "100-bigelow",
            "latitude": 42.202907,
            "longitude": -72.607309
        },
        {
            "id": 31,
            "name": "Korea Institute of Science and Technology Information",
            "siteName": "Kreonet",
            "slug": "kreonet",
            "latitude": 37.5112,
            "longitude": 126.974098
        },
        {
            "id": 36,
            "name": "University of California Riverside",
            "siteName": "UCR",
            "slug": "ucr",
            "latitude": 33.97368,
            "longitude": -117.32806
        },
        {
            "id": 79,
            "name": "Internet2",
            "siteName": "Internet2 Boise",
            "slug": "i2-boise",
            "latitude": 43.61831,
            "longitude": -116.20379
        },
        {
            "id": 65,
            "name": "Internet2",
            "siteName": "Internet2 Cincinnati",
            "slug": "i2-cincinnati",
            "latitude": 39.102389,
            "longitude": -84.502853
        },
        {
            "id": 89,
            "name": "Internet2",
            "siteName": "Internet2 Denver",
            "slug": "i2-denver",
            "latitude": 39.745802,
            "longitude": -104.97955
        },
        {
            "id": 21,
            "name": "Internet2",
            "siteName": "Internet2 Houston",
            "slug": "i2-houston",
            "latitude": 29.771315,
            "longitude": -95.351
        },
        {
            "id": 84,
            "name": "Internet2",
            "siteName": "Internet2 Jacksonville",
            "slug": "i2-jacksonville",
            "latitude": 30.258798,
            "longitude": -81.610646
        },
        {
            "id": 67,
            "name": "Internet2 Missouri, Kansas City",
            "siteName": "Internet2 Missouri, Kansas City",
            "slug": "i2-kans",
            "latitude": 39.101078,
            "longitude": -94.582098
        },
        {
            "id": 99,
            "name": "Alabama A&M University",
            "siteName": "Alabama A&M University",
            "slug": "alabama-am-university",
            "latitude": 34.78409,
            "longitude": -86.5722
        },
        {
            "id": 22,
            "name": "StarLight",
            "siteName": "Startap",
            "slug": "startap",
            "latitude": 42.05647,
            "longitude": -87.67528
        },
        {
            "id": 20,
            "name": "Clemson University",
            "siteName": "Clemson",
            "slug": "clemson",
            "latitude": 34.677502,
            "longitude": -82.836197,
            "ospool": true
        },
        {
            "id": 34,
            "name": "Internet2",
            "siteName": "UIC",
            "slug": "uic",
            "latitude": 41.8783,
            "longitude": -87.690697,
            "ospool": true
        },
        {
            "id": 70,
            "name": "Florida A&M University",
            "siteName": "Florida Agricultural and Mechanical University",
            "slug": "famu",
            "latitude": 30.42272,
            "longitude": -84.28769,
            "ospool": true
        },
        {
            "id": 17,
            "name": "University of California Santa Cruz",
            "siteName": "UCSC",
            "slug": "ucsc",
            "latitude": 37.0313,
            "longitude": -122.119797
        },
        {
            "id": 30,
            "name": "UC Irvine",
            "siteName": "UCI",
            "slug": "uci",
            "latitude": 33.778301,
            "longitude": -118.026802
        },
        {
            "id": 87,
            "name": "CESNET",
            "siteName": "Zikova 4",
            "slug": "zikova-4",
            "latitude": 50.09883,
            "longitude": 14.388636
        },
        {
            "id": 29,
            "name": "University of Amsterdam",
            "siteName": "UVALight",
            "slug": "uvalight",
            "latitude": 52.382401,
            "longitude": 4.8995
        },
        {
            "id": 91,
            "name": "Oklahoma State University",
            "siteName": "Oklahoma State University",
            "slug": "osu",
            "latitude": 36.125861,
            "longitude": -97.073982
        },
        {
            "id": 18,
            "name": "University of Hawaiʻi",
            "siteName": "Hawaii",
            "slug": "hawaii",
            "latitude": 21.289,
            "longitude": -157.802795
        },
        {
            "id": 53,
            "name": "University Corporation for Atmospheric Research",
            "siteName": "UCAR",
            "slug": "ucar",
            "latitude": 41.12825,
            "longitude": -104.89782
        },
        {
            "id": 47,
            "name": "University of Oklahoma",
            "siteName": "OU",
            "slug": "ou",
            "latitude": 35.20579,
            "longitude": -97.44567
        },
        {
            "id": 48,
            "name": "University of California Los Angeles",
            "siteName": "UCLA",
            "slug": "ucla",
            "latitude": 34.06891,
            "longitude": -118.44518
        },
        {
            "id": 32,
            "name": "Metropolitan Research & Education Network",
            "siteName": "MREN",
            "slug": "mren",
            "latitude": 41.7886,
            "longitude": -87.5987
        },
        {
            "id": 28,
            "name": "University of South Dakota",
            "siteName": "USD",
            "slug": "usd",
            "latitude": 42.788741,
            "longitude": -96.92546,
            "ospool": true
        },
        {
            "id": 24,
            "name": "Kansas State University",
            "siteName": "KSU",
            "slug": "ksu",
            "latitude": 39.577321,
            "longitude": -96.614302
        },
        {
            "id": 95,
            "name": "University of Arkansas for Medical Sciences",
            "siteName": "UAMS",
            "slug": "uams",
            "latitude": 34.746564,
            "longitude": -92.32434
        },
        {
            "id": 63,
            "name": "University of Arkansas",
            "siteName": "UARK",
            "slug": "uark",
            "latitude": 36.06869,
            "longitude": -94.17484
        },
        {
            "id": 78,
            "name": "University of Missouri, Columbia",
            "siteName": "University of Missouri, Columbia",
            "slug": "mizzou",
            "latitude": 38.940345,
            "longitude": -92.327723
        },
        {
            "id": 45,
            "name": "University of Nebraska",
            "siteName": "UNL",
            "slug": "unl",
            "latitude": 40.819759,
            "longitude": -96.705541,
            "ospool": true
        },
        {
            "id": 43,
            "name": "Corporation for Education Network Initiatives in California",
            "siteName": "CENIC LA",
            "slug": "cenic-la",
            "latitude": 33.879806,
            "longitude": -118.02744
        },
        {
            "id": 96,
            "name": "PNWGP",
            "siteName": "Westin Building Exchange",
            "slug": "westin-building-exchange",
            "latitude": 47.614445,
            "longitude": -122.338835
        },
        {
            "id": 76,
            "name": "Corporation for Education Network Initiatives in California",
            "siteName": "CENIC Sunnyvale",
            "slug": "cenic-sunnyvale",
            "latitude": 37.368741,
            "longitude": -122.034974
        },
        {
            "id": 81,
            "name": "American Museum of Natural History",
            "siteName": "CPW",
            "slug": "american-museum-of-natural-history",
            "latitude": 40.781436,
            "longitude": -73.973852,
            "ospool": true
        },
        {
            "id": 1,
            "name": "University of California San Diego",
            "siteName": "SDSC",
            "slug": "sdsc",
            "latitude": 32.88454,
            "longitude": -117.239103
        },
        {
            "id": 97,
            "name": "Iron Mountain Datacenter",
            "siteName": "Iron Mountain Datacenter",
            "slug": "iron-mountain-datacenter",
            "latitude": 33.45416,
            "longitude": -111.97518
        },
        {
            "id": 115,
            "name": "California State University, Sacramento",
            "siteName": "csus",
            "slug": "csus",
            "latitude": 38.560993,
            "longitude": -121.423907
        },
        {
            "id": 25,
            "name": "University of New Mexico",
            "siteName": "UNM",
            "slug": "unm",
            "latitude": 35.09013,
            "longitude": -106.63597
        },
        {
            "id": 5,
            "name": "FIU-CIARA",
            "siteName": "Equinix MI1",
            "slug": "equinix-mi1",
            "latitude": 25.782432,
            "longitude": -80.193133
        },
        {
            "id": 27,
            "name": "California Institute of Technology",
            "siteName": "Ultralight",
            "slug": "ultralight",
            "latitude": 34.1377,
            "longitude": -118.1253
        },
        {
            "id": 12,
            "name": "University of Guam",
            "siteName": "UOG",
            "slug": "uog",
            "latitude": 13.432524,
            "longitude": 144.8033
        },
        {
            "id": 69,
            "name": "University of Michigan",
            "siteName": "Atlas Great Lakes tier 2",
            "slug": "aglt2",
            "latitude": 42.27778,
            "longitude": -83.75534
        },
        {
            "id": 49,
            "name": "South Dakota State University",
            "siteName": "SDState",
            "slug": "sdstate",
            "latitude": 44.31909,
            "longitude": -96.78351
        },
        {
            "id": 114,
            "name": "Gatech/Sox",
            "siteName": "Morehouse",
            "slug": "morehouse",
            "latitude": 33.748316,
            "longitude": -84.414867
        },
        {
            "id": 100,
            "name": "California State University",
            "siteName": "Fullerton",
            "slug": "fullerton",
            "latitude": 33.88364,
            "longitude": -117.88513,
            "ospool": true
        },
        {
            "id": 56,
            "name": "New York University",
            "siteName": "NYU",
            "slug": "nyu",
            "latitude": 40.729413,
            "longitude": -73.996547,
            "ospool": true
        },
        {
            "id": 16,
            "name": "Case Western Reserve University",
            "siteName": "CWRU",
            "slug": "cwru",
            "latitude": 41.50433,
            "longitude": -81.60839
        },
        {
            "id": 40,
            "name": "Stanford University",
            "siteName": "Stanford",
            "slug": "stanford",
            "latitude": 37.423,
            "longitude": -122.163902
        },
        {
            "id": 111,
            "name": "California State University, Monterey Bay",
            "siteName": "CSUMB",
            "slug": "csumb",
            "latitude": 36.65379,
            "longitude": -121.798957
        },
        {
            "id": 109,
            "name": "CSU Chico",
            "siteName": "CSU Chico",
            "slug": "csu-chico",
            "latitude": 39.73553,
            "longitude": -121.85047
        },
        {
            "id": 26,
            "name": "NYSERNet",
            "siteName": "NYSERNet",
            "slug": "nysernet",
            "latitude": 43.049619,
            "longitude": -76.152805
        },
        {
            "id": 93,
            "name": "State University of New York",
            "siteName": "University at Buffalo",
            "slug": "buffalo",
            "latitude": 43.002306,
            "longitude": -78.787699
        },
        {
            "id": 112,
            "name": "Massachusetts Green High Performance Computing Center",
            "siteName": "mghpcc-umass",
            "slug": "mghpcc-umass",
            "latitude": 42.202907,
            "longitude": -72.607309,
            "ospool": true
        },
        {
            "id": 92,
            "name": "NJ Edge",
            "siteName": "njedge",
            "slug": "njedge",
            "latitude": 40.16068,
            "longitude": -74.05306
        },
        {
            "id": 117,
            "name": "Great Plains Network",
            "siteName": "Oral Roberts University",
            "slug": "oru",
            "latitude": 36.05096,
            "longitude": -95.952855
        },
        {
            "id": 68,
            "name": "Internet2",
            "siteName": "Internet2 Chicago",
            "slug": "i2-uchicago",
            "latitude": 41.896504,
            "longitude": -87.64306
        },
        {
            "id": 66,
            "name": "Internet2",
            "siteName": "Internet2 New York",
            "slug": "i2-ny",
            "latitude": 40.720069,
            "longitude": -74.005199
        },
        {
            "id": 19,
            "name": "University of California San Diego",
            "siteName": "UCSD",
            "slug": "ucsd",
            "latitude": 32.851501,
            "longitude": -117.2798,
            "ospool": true
        },
        {
            "id": 80,
            "name": "Internet2",
            "siteName": "Internet2 Sunnyvale",
            "slug": "i2-sunnyvale",
            "latitude": 37.373779,
            "longitude": -121.987513
        },
        {
            "id": 101,
            "name": "Kennesaw State University",
            "siteName": "Kennesaw State University",
            "slug": "kennesaw",
            "latitude": 34.02348,
            "longitude": -84.58891
        },
        {
            "id": 107,
            "name": "Internet2",
            "siteName": "Internet2 Pensacola",
            "slug": "i2-pensacola",
            "latitude": 30.41086,
            "longitude": -87.20918
        },
        {
            "id": 15,
            "name": "UC Santa Barbara",
            "siteName": "UCSB",
            "slug": "ucsb",
            "latitude": 34.4216,
            "longitude": -119.706802
        },
        {
            "id": 75,
            "name": "University of California Santa Cruz",
            "siteName": "NTTDATA Western Technology Center",
            "slug": "ucsc-wa",
            "latitude": 47.243511,
            "longitude": -119.864901
        },
        {
            "id": 102,
            "name": "University of South Alabama",
            "siteName": "Shelby Hall",
            "slug": "shelby-hall",
            "latitude": 30.691591,
            "longitude": -88.174933
        },
        {
            "id": 116,
            "name": "Montana State University",
            "siteName": "Montana State University",
            "slug": "msu",
            "latitude": 45.66607,
            "longitude": -111.04832
        },
        {
            "id": 54,
            "name": "South Dakota School of Mines & Technology",
            "siteName": "SDSMT",
            "slug": "sdsmt",
            "latitude": 44.07379,
            "longitude": -103.20609
        },
        {
            "id": 106,
            "name": "Internet2",
            "siteName": "Internet2 Seattle",
            "slug": "i2-seattle",
            "latitude": 47.61348,
            "longitude": -122.34738
        },
        {
            "id": 88,
            "name": "SingAREN",
            "siteName": "NSCC",
            "slug": "nscc",
            "latitude": 1.29918,
            "longitude": 103.78763
        },
        {
            "id": 37,
            "name": "Cardiff University",
            "siteName": "AC",
            "slug": "ac",
            "latitude": 52.371746,
            "longitude": -1.502526
        },
        {
            "id": 105,
            "name": "University of Tulsa",
            "siteName": "University of Tulsa",
            "slug": "university-of-tulsa",
            "latitude": 36.152693,
            "longitude": -95.946053
        },
        {
            "id": 103,
            "name": "CERN",
            "siteName": "CERN Data Center",
            "slug": "cern-data-center",
            "latitude": 46.232661,
            "longitude": 6.045924
        }
    ]
    const nrp_facilities = NRP.map(x => x.name).filter(x => NRP.map(x => x.name).includes(x))


    const iconConfig = {
        iconSize: [36,36],
        iconAnchor: [18, 36],
        popupAnchor: [0,-36],
        shadowUrl: "/static/images/map/small_shadow.svg",
        shadowAnchor: [12,30],
        shadowSize: [24,24]
    }

    const originIcon = L.icon({iconUrl: "/static/images/map/origin.svg", ...iconConfig})
    const cacheIcon = L.icon({iconUrl: "/static/images/map/cache.svg", ...iconConfig})
    const blueStarIcon = L.icon({iconUrl: "/static/images/map/star_blue.svg", ...iconConfig})
    const redStarIcon = L.icon({iconUrl: "/static/images/map/star_red.svg", ...iconConfig})
    const greenStarIcon = L.icon({iconUrl: "/static/images/map/star_green.svg", ...iconConfig})
    const purpleStarIcon = L.icon({iconUrl: "/static/images/map/star_purple.svg", ...iconConfig})
    const cacheAndOriginIcon = L.icon({
        iconUrl: "/static/images/map/cache_and_origin.svg",
        iconSize: [42,42],
        iconAnchor: [21, 42],
        popupAnchor: [0, -42],
        shadowUrl: "/static/images/map/large_shadow.svg",
        shadowAnchor: [12,30],
        shadowSize: [24,24]
    })

    let shownOspoolContributors = new Set()

    downloadPNG = async () => {
        document.getElementsByClassName("leaflet-control-zoom")[0].hidden = true

        // You have to run it twice - https://github.com/tsayen/dom-to-image/issues/343
        let dataUrl = await domtoimage.toPng(document.getElementById("print-region"))
        dataUrl = await domtoimage.toPng(document.getElementById("print-region"))

        let link = document.createElement('a');
        link.download = 'OSG_Map.png';
        link.href = dataUrl;
        link.click();

        document.getElementsByClassName("leaflet-control-zoom")[0].hidden = false
    }

    toggleFullscreen = async () => {
        document.getElementById("main").requestFullscreen()
    }

    class Resource {
        constructor({Active, Description, Disable, FQDN, ID, IsCCStar, Name, Services, Tags, ResourceGroupName, ...props}) {
            this.active = Active;
            this.description = Description;
            this.disable = Disable;
            this.FQDN = FQDN;
            this.id = ID;
            this.isCCStar = IsCCStar;
            this.name = Name;
            this.services = Services?.Service;
            this.tags = Tags;
            this.resourceGroupName = ResourceGroupName;
            this.isEDU = this.calcIsEDU();
            this.isCompute = this.calcIsCompute();
            this.isStorage = this.calcIsStorage()
            this.isNetwork = this.calcIsNetwork();
            this.isCache = this.calcIsCache();
            this.isOrigin = this.calcIsOrigin();
        }

        calcIsEDU () {
            return this.FQDN.endsWith(".edu")
        }

        calcIsCompute () {
            return this.services.some(({Name: name}) => compute_services.has(name))
        }

        calcIsStorage () {
            return this.services.some(({Name: name}) => storage_services.has(name))
        }

        calcIsNetwork () {
            return this.services.some(({Name: name}) => network_services.has(name))
        }

        calcIsCache () {
            return this.services.some(({Name: name}) => name === "XRootD cache server" || name === "Pelican cache")
        }

        calcIsOrigin () {
            return this.services.some(({Name: name}) => name === "XRootD origin server" || name === "Pelican origin")
        }
    }

    class Site {

        constructor(
            {
                Resources: { Resource : resources },
                Site: { Latitude, Longitude, Name : siteName },
                Facility: { Name: facilityName },
                GroupName: resourceGroupName
            },
            ospoolResources
        ) {
            this.resources = {}
            this.resourceGroups = {}
            this.latitude = Latitude
            this.longitude = Longitude
            this.name = siteName
            this.facilityName = facilityName
            this.siteName = siteName
            this.addResourceGroup({ Resources: { Resource : resources }, GroupName: resourceGroupName })
            this.ospoolResources = ospoolResources
        }

        addResourceGroup({
            Resources: { Resource : resources },
            GroupName: resourceGroupName
        }) {
            resources = resources.map(x => new Resource({...x, ResourceGroupName: resourceGroupName}))
            this.resourceGroups[resourceGroupName] = resources
            for(let resource of resources){
                this.resources[resource.name] = resource
            }
        }

        getMarker(view) {
            let icon;

            if(view === "ComputevsStorage"){
                if(this.isCompute && this.isStorage){
                    icon = greenStarIcon
                } else if(this.isCompute){
                    icon = blueStarIcon
                } else if(this.isStorage){
                    icon = purpleStarIcon
                }

            } else if(view === "EduvsOther"){
                if(this.isEDU){
                    icon = blueStarIcon
                } else {
                    icon = greenStarIcon
                }

            } else if(view === "CCStar"){
                if(this.isCCStar){
                    icon = redStarIcon
                }

            } else if(view === "OpenScienceDataFederation") {
                if (this.isOrigin && this.isCache) {
                    icon = cacheAndOriginIcon
                } else if (this.isOrigin) {
                    icon = originIcon
                } else if (this.isCache) {
                    icon = cacheIcon
                }

            } else if(view === "OSPool"){
                if (this.isOSPool){
                    icon = greenStarIcon
                }

            } else {
                icon = greenStarIcon
            }

            if(!icon){
                return null
            }

            const offsetX = (Math.random() - .5) * 0.1
            const offsetY = (Math.random() - .5) * 0.1

            this.marker = L.marker([this.latitude + offsetX, this.longitude + offsetY], {icon: icon}).bindPopup(this.getDisplayHTML(view));
            this.marker.site = this

            this.popup = this.marker.getPopup()
            this.popup.site = this

            return this.marker
        }

        get services() {
            if( !this._services ){
                this._services = Object.values(this.resources).flatMap( resource => resource?.Services?.Service ? resource?.Services?.Service : [] )
            }
            return this._services
        }

        getDisplayHTML(view) {
            let container = document.createElement("div")
            container.classList.add("popup")

            let header_site = document.createElement("h4")
            header_site.textContent = this.siteName
            header_site.classList.add("site-card-header")
            container.appendChild(header_site)

            let header_facility = document.createElement("h5")
            header_facility.textContent = this.facilityName
            header_facility.classList.add("facility-card-header")
            container.appendChild(header_facility)

            container.appendChild(document.createElement("hr"))

            for(const [resourceGroupName, resourceGroupResources] of Object.entries(this.resourceGroups)){

                // Check if the rg has any resources to show
                if(!resourceGroupResources.some(x => this.showResourceInView(x,view))){
                    continue;
                }

                let resourceGroupNode = document.createElement("h4")
                resourceGroupNode.innerText = "Resource Group: " + resourceGroupName
                resourceGroupNode.classList.add("resource-group-header")
                container.appendChild(resourceGroupNode)

                for(const resource of resourceGroupResources){

                    // Check if the rg has any resources to show
                    if(!this.showResourceInView(resource,view)){
                        continue;
                    }

                    let resourceContainerNode = document.createElement("div")
                    resourceContainerNode.classList.add("resource-container")

                    if(view === "ComputevsStorage"){
                        resourceContainerNode.classList.add(resource.isCompute ? "compute" : "storage")
                    }

                    let imgNode = document.createElement("img")
                    imgNode.src = "/static/images/map/server_simple.svg"
                    imgNode.alt = "Image of Server"

                    let resourceNode = document.createElement("span")
                    resourceNode.innerText = resource?.name
                    resourceNode.classList.add("resource-header")

                    resourceContainerNode.appendChild(imgNode)
                    resourceContainerNode.appendChild(resourceNode)

                    container.appendChild(resourceContainerNode)
                }
            }

            return container
        }

        showResourceInView(resource, view){
            if(view === "ComputevsStorage"){
                return resource.isStorage || resource.isCompute
            } else if(view === "CCStar"){
                return resource.isCCStar
            } else if(view === "OpenScienceDataFederation") {
                return resource.isCache || resource.isOrigin
            } else if(view === "OSPool"){
                return this.resourceIsInOSPool(resource)
            }

            return true;
        }


        get isCCStar() {
            return Object.values(this.resources).some(x => x.isCCStar)
        }

        get isEDU() {
            return Object.values(this.resources).some(x => x.isEDU)
        }

        get isCompute() {
            return Object.values(this.resources).some(x => x.isCompute)
        }

        get isStorage() {
            return Object.values(this.resources).some(x => x.isStorage)
        }

        get isNetwork() {
            return Object.values(this.resources).some(x => x.isNetwork)
        }

        get isCache() {
            return Object.values(this.resources).some(x => x.isCache)
        }

        get isOrigin(){
            return Object.values(this.resources).some(x => x.isOrigin)
        }

        get isOSPool () {
            if(Object.values(this.resources).some(x => this.resourceIsInOSPool(x))){
                shownOspoolContributors.add(this.name)
            }
            return Object.values(this.resources).some(x => this.resourceIsInOSPool(x))
        }

        resourceIsInOSPool (resource) {
            // If this resource is in the ospool_resources list
            return this.ospoolResources.has(resource.name.toLowerCase()) ||

                // If this resourceGroup is in the list, and no resources are named that groupname
                (
                    !(resource.resourceGroupName in this.resources) &&
                    this.ospoolResources.has(resource.resourceGroupName.toLowerCase())

                // If this resources Site name is in the list, and no resources have this Site name
                ) || (
                    !(this.siteName in this.resources) &&
                    this.ospoolResources.has(this.siteName.toLowerCase())
                )
        }
    }

    class Map {

        constructor() {

            // Defaults
            let latitude = 38.96
            let longitude = -92.37
            let zoom = 4

            // Check for zoom and location inputs
            if(window.location.hash){
                let decodedHash = decodeURI(window.location.hash)
                let viewportComponents = decodedHash.split("#")[1].split("|");
                [latitude, longitude] = viewportComponents[0].split(',')
                zoom = viewportComponents[1]
            }

            // Initialize the map
            this.map = L.map('map').setView([latitude, longitude], zoom);
            L.tileLayer('https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token={accessToken}', {
                attribution: 'Map data &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors, Imagery © <a href="https://www.mapbox.com/">Mapbox</a>',
                maxZoom: 18,
                id: 'mapbox/satellite-streets-v12',
                tileSize: 512,
                zoomOffset: -1,
                accessToken: 'pk.eyJ1IjoidGFraW5nZHJha2UiLCJhIjoiY2wya3IyZGNvMDFyOTNsbnhyZjBteHRycSJ9.g6tRaqN8_iJxHgAQKNP6Tw'
            }).addTo(this.map);

            // Initialize the legend nodes
            this.legendNode = document.getElementById("legend")
            this.legendItemsNode = document.getElementById("legend-items")
        }

        _updateLegend(legend, layer) {
            this.legendNode.hidden = false

            while (this.legendItemsNode.firstChild) {
                this.legendItemsNode.removeChild(this.legendItemsNode.firstChild)
            }

            Object.entries(legend).forEach(([iconLabel, iconUrl]) => {
                let entryContainerNode = document.createElement("div")
                entryContainerNode.classList.add("entry-container")
                this.legendItemsNode.appendChild(entryContainerNode)

                let imgContainer = document.createElement("div")
                imgContainer.classList.add("legend-image-container")

                let imgNode = document.createElement("img")
                imgContainer.appendChild(imgNode)

                let labelContainer = document.createElement("div")
                labelContainer.classList.add("label-container")

                let labelNode = document.createElement("span")
                labelNode.classList.add("label-node")

                let countNode = document.createElement("span")
                countNode.classList.add("count-node")

                entryContainerNode.appendChild(imgContainer)
                labelContainer.append(labelNode)
                labelContainer.appendChild(countNode)
                entryContainerNode.appendChild(labelContainer)


                imgNode.src = iconUrl
                imgNode.alt = "Icon for " + iconLabel

                labelNode.innerHTML = iconLabel

                // Count values in layer that match iconUrl with current legend item
                // In this case iconUrl is a proxy for Site Category
                let siteCount = Object.values(layer._layers)
                    .reduce((og, v) => {
                        if(v.options.icon.options.iconUrl === iconUrl){
                            return og + 1
                        } else {
                            return og
                        }
                    }, 0)

                let institutionCount = Object.values(layer._layers)
                    .reduce((og, v) => {
                        if(v.options.icon.options.iconUrl === iconUrl){
                            og.push(v?.site?.facilityName)
                        }
                        return og
                    }, [])

                countNode.innerText = `${siteCount} Sites, ${new Set(institutionCount).size} Institutions`
            })

            this.legendNode.hidden = false
        }

        _updateLayer(layer) {
            // Remove previous layer
            if (this.currentLayer) {
                this.map.removeLayer(this.currentLayer)
            }

            // Update to new layer
            this.currentLayer = layer
            this.currentLayer.addTo(this.map)
        }

        update(layer, legend) {
            this._updateLayer(layer)
            this._updateLegend(legend, layer)
        }
    }

    class Select {
        constructor(id) {
            this.node = document.getElementById(id)
        }

        addOptions(options) {
            // Remove previous options
            while(this.node.firstChild){
                this.node.removeChild(this.node.firstChild)
            }
            // Add new options
            options.forEach(([value, text]) => {
                let optionNode = document.createElement("option")
                optionNode.value = value
                optionNode.innerText = text
                this.node.appendChild(optionNode)
            })
        }
    }


    class SitemapPage {

        constructor() {

            this.leafletMap = new Map()
            this.leafletMap.map.on("popupopen", (e) => {
                this.siteSelect.value = e.popup.site.siteName

                // Default is opening '#close' which breaks url paramaters
                for(let x of document.getElementsByClassName("leaflet-popup-close-button")){
                    x.setAttribute("href", "javascript:void(0)")
                }
            })

            this.viewSelect = new Select("view")
            this.viewSelect.addOptions(
                Object.entries(this.metaData).map(([key, value]) => [key, value?.longText])
            )
            this.viewSelect.node.value = this.view
            this.viewSelect.node.addEventListener("change", () => {
                let url = new URL(location)
                url.searchParams.set("view", this.viewSelect.node.value)
                history.pushState({}, "", url)
                this.update()
            })

            this.siteSelect = new Select("site")
            this.siteSelect.node.addEventListener("change", () => {
                this.sites[this.siteSelect.node.value].marker.openPopup()
            })

            const url = new URL(location)
            let navigation = url.searchParams.get("navigation")
            if(navigation == 0){
                document.getElementById("selection-container").hidden = true
                document.getElementById("print-button").hidden = true
                document.getElementById("full-screen").hidden = true
                document.getElementsByClassName("leaflet-top")[0].hidden = true
            }

            this.layers = {}

            this.asyncWork()
        }

        get view() {
            let searchParams = new URLSearchParams(window.location.search);
            return searchParams.get("view") ? searchParams.get("view") : "OSGSites"
        }

        get layer(){
            if( !(this.view in this.layers) ){
                this.layers[this.view] = L.layerGroup(this.markers)
            }
            return this.layers[this.view]
        }

        /**
         * TODO: Make this dynamically map from the json source file from Derek
         * TODO: Add institutionID to this node map so I can rule out duplicates
         * https://github.com/djw8605/nrp-map-app/blob/main/data/nodes.json
         * @returns {*[]}
         */
        get nrpMarkers() {

            // We only have markers for OSPool and OSGSites view
            if( this.view !== "OSPool" && this.view !== "OSGSites"){
                return []
            }

            const offsetX = (Math.random() - .5) * 0.1
            const offsetY = (Math.random() - .5) * 0.1

            const markers = NRP.filter(nrp => this.view === "OSPool" ? nrp.ospool : true).filter(nrp => !(Object.entries(this.sites).map(([_, s]) => s.siteName).includes(nrp.siteName))).map(x => {
                const marker = L.marker([x.latitude + offsetX, x.longitude + offsetY], {icon: greenStarIcon})
                marker.site = {
                    siteName: x.siteName,
                    facilityName: x.name,
                    latitude: x.latitude,
                    longitude: x.longitude
                }
                return marker
            })

            return markers
        }

        get markers() {
            const topologyMarkers = Object.entries(this.sites).map(([name, site]) => site.getMarker(this.view)).filter(icon => icon !== null)

            return [
                ...topologyMarkers,
                ...this.nrpMarkers
            ]
        }

        get metaData() {
            return {
                "OSGSites" : {
                    "longText" : "OSG Sites",
                    "legend" : {
                        "OSG Site": greenStarIcon?.options?.iconUrl,
                    }
                },
                "ComputevsStorage" : {
                    "longText" : "Compute and Storage",
                    "legend" : {
                        "Compute Only": blueStarIcon?.options?.iconUrl,
                        "Storage Only": purpleStarIcon?.options?.iconUrl,
                        "Compute And Storage": greenStarIcon?.options?.iconUrl,
                    }
                },
                "EduvsOther" : {
                    "longText" : "EDU sites and others",
                    "legend" : {
                        "EDU Site": blueStarIcon?.options?.iconUrl,
                        "Others": greenStarIcon?.options?.iconUrl,
                    }
                },
                "CCStar" : {
                    "longText" : "CC* Sites",
                    "legend" : {
                        "CC* Site": redStarIcon?.options?.iconUrl
                    }
                },
                "OpenScienceDataFederation" : {
                    "longText" : "Open Science Data Federation",
                    "legend" : {
                        "Origin": originIcon?.options?.iconUrl,
                        "Cache": cacheIcon?.options?.iconUrl,
                        "Cache and Origin": cacheAndOriginIcon?.options?.iconUrl,
                    }
                },
                "OSPool" : {
                    "longText" : `OSPool Contributors`,
                    "legend" : {
                        [`<div>OSPool Contributor</div><div style="margin-top: -7px; color: #848484"><small>Updated ${this.ospoolResourcesTimestamp}</small></div>`]: greenStarIcon?.options?.iconUrl
                    }
                }
            }
        }

        update() {
            this.siteSelect.addOptions(
                Object.values(this.layer._layers)
                    .map(({ site })=> [site?.siteName, `${site?.facilityName} - ${site?.siteName}`])
                    .sort((a, b) => a[1].localeCompare(b[1]))
            )
            this.leafletMap.update(this.layer, this.metaData[this.view].legend)
        }

        async asyncWork () {
            await this.fetchOSPoolResources()
            await this.fetchSites()
        }

        /** Fetches the OSPool resources falling back if failing */
        async fetchOSPoolResources() {
            try {
                await this.fetchOSPoolResourcesList()
                await this.fetchOSPoolResourceUpdateTime()
            } catch (e) {
                console.error(e)
                this.ospoolResourcesTimestamp = backup_ospool_resource_timestamp
                this.ospoolResources = backup_ospool_resources
            }
        }

        async fetchOSPoolResourceUpdateTime() {
            const response = await fetch("https://api.github.com/repos/osg-htc/ospool-data/commits")
            const commits = await response.json()
            const timestampString = commits[0].commit.author.date
            this.ospoolResourcesTimestamp = new Date(timestampString).toLocaleString()
        }

        async fetchOSPoolResourcesList() {
            let response = await fetch("https://osg-htc.org/ospool-data/data/ospool_resources_report/ospool_resources.json")
            let ospoolResources = await response.json()
            this.ospoolResources = new Set(ospoolResources.map(x => x.toLowerCase()))
        }

        async fetchSites() {
            let response = await fetch("/api/resource_group_summary")
            let resourceGroupJson = await response.json()

            // Filter out inactive resources and resource groups with only inactive resources
            let activeResourceGroupJson = Object.entries(resourceGroupJson).reduce((o, [k,rg]) => {
                let activeResources = rg["Resources"]["Resource"].filter(x => x['Active'])
                if(activeResources.length && rg['Production']){
                    rg["Resources"]["Resource"] = activeResources
                    o[k] = rg
                }
                return o
            }, {})

            let sites = {}
            Object.entries(activeResourceGroupJson).forEach(([key, value]) => {
                if(value?.Site?.Name in sites){
                    sites[value?.Site?.Name].addResourceGroup(value)
                } else {
                    sites[value?.Site?.Name] = new Site(value, this.ospoolResources)
                }
            })

            this.sites = sites
            this.update()
        }
    }

    const page = new SitemapPage()
</script>
</html>




